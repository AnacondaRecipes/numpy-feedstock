From 7b6d3e6daaa3e4e09892953c1ec01defb2fbfb07 Mon Sep 17 00:00:00 2001
From: Sophia Castellarin <scastellarin@anaconda.com>
Date: Fri, 9 Aug 2019 00:20:40 -0500
Subject: [PATCH] remove assume_aligned symbol

---
 numpy/core/src/umath/loops.c.src | 16 ----------------
 1 file changed, 16 deletions(-)

diff --git a/numpy/core/src/umath/loops.c.src b/numpy/core/src/umath/loops.c.src
index 2b6a3a11f..6d7c1498d 100644
--- a/numpy/core/src/umath/loops.c.src
+++ b/numpy/core/src/umath/loops.c.src
@@ -2525,13 +2525,11 @@ NPY_NO_EXPORT void
 
 		    if( DISJOINT_OR_SAME(op1_shifted, ip1_aligned, j_max, 1) &&
 			DISJOINT_OR_SAME(op1_shifted, ip2_shifted, j_max, 1) ) {
-			__assume_aligned(ip1_aligned, 64);
 			_Pragma("vector")
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
 		    } else {
-			__assume_aligned(ip1_aligned, 64);
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
@@ -2574,7 +2572,6 @@ NPY_NO_EXPORT void
                     @type@ *ip2_aligned = ip2 + peel;
                     @type@ *op1_shifted = op1 + peel;
 
-                    __assume_aligned(ip2_aligned, 64);
                     for(j = 0; j < j_max; j++) {
                         op1_shifted[j] = ip1c @OP@ ip2_aligned[j];
                     }
@@ -2616,7 +2613,6 @@ NPY_NO_EXPORT void
                     @type@ *op1_shifted = op1 + peel;
                     @type@ *ip1_aligned = ip1 + peel;
 
-                    __assume_aligned(ip1_aligned, 64);
                     for(j = 0; j < j_max; j++) {
                         op1_shifted[j] = ip1_aligned[j] @OP@ ip2c;
                     }
@@ -2693,13 +2689,11 @@ NPY_NO_EXPORT void
 
 		    if( DISJOINT_OR_SAME(op1_shifted, ip1_aligned, j_max, 1) &&
 			DISJOINT_OR_SAME(op1_shifted, ip2_shifted, j_max, 1) ) {
-			__assume_aligned(ip1_aligned, 64);
 			_Pragma("vector")
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
 		    } else {
-			__assume_aligned(ip1_aligned, 64);
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
@@ -2742,7 +2736,6 @@ NPY_NO_EXPORT void
                     @type@ *ip2_aligned = ip2 + peel;
                     @type@ *op1_shifted = op1 + peel;
 
-                    __assume_aligned(ip2_aligned, 64);
                     for(j = 0; j < j_max; j++) {
                         op1_shifted[j] = ip1c @OP@ ip2_aligned[j];
                     }
@@ -2784,7 +2777,6 @@ NPY_NO_EXPORT void
                     @type@ *op1_shifted = op1 + peel;
                     @type@ *ip1_aligned = ip1 + peel;
 
-                    __assume_aligned(ip1_aligned, 64);
                     for(j = 0; j < j_max; j++) {
                         op1_shifted[j] = ip1_aligned[j] @OP@ ip2c;
                     }
@@ -2861,13 +2853,11 @@ NPY_NO_EXPORT void
 
 		    if( DISJOINT_OR_SAME(op1_shifted, ip1_aligned, j_max, 1) &&
 			DISJOINT_OR_SAME(op1_shifted, ip2_shifted, j_max, 1) ) {
-			__assume_aligned(ip1_aligned, 64);
 			_Pragma("vector")
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
 		    } else {
-			__assume_aligned(ip1_aligned, 64);
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
@@ -2910,7 +2900,6 @@ NPY_NO_EXPORT void
                     @type@ *ip2_aligned = ip2 + peel;
                     @type@ *op1_shifted = op1 + peel;
 
-                    __assume_aligned(ip2_aligned, 64);
                     for(j = 0; j < j_max; j++) {
                         op1_shifted[j] = ip1c @OP@ ip2_aligned[j];
                     }
@@ -2952,7 +2941,6 @@ NPY_NO_EXPORT void
                     @type@ *op1_shifted = op1 + peel;
                     @type@ *ip1_aligned = ip1 + peel;
 
-                    __assume_aligned(ip1_aligned, 64);
                     for(j = 0; j < j_max; j++) {
                         op1_shifted[j] = ip1_aligned[j] @OP@ ip2c;
                     }
@@ -3030,13 +3018,11 @@ NPY_NO_EXPORT void
 
 		    if( DISJOINT_OR_SAME(op1_shifted, ip1_aligned, j_max, 1) &&
 			DISJOINT_OR_SAME(op1_shifted, ip2_shifted, j_max, 1) ) {
-			__assume_aligned(ip1_aligned, 64);
 			_Pragma("vector")
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
 		    } else {
-			__assume_aligned(ip1_aligned, 64);
 			for(j = 0; j < j_max; j++) {
 			    op1_shifted[j] = ip1_aligned[j] @OP@ ip2_shifted[j];
 			}
@@ -3072,7 +3058,6 @@ NPY_NO_EXPORT void
             if (j_max > 0) {
                 @type@ *ip2_aligned = ip2 + peel, *op1_shifted = op1 + peel;
 
-                __assume_aligned(ip2_aligned, 64);
                 for(j = 0; j < j_max; j++) {
                     op1_shifted[j] = ip1c @OP@ ip2_aligned[j];
                 }
@@ -3106,7 +3091,6 @@ NPY_NO_EXPORT void
             if (j_max > 0) {
                 @type@ *ip1_aligned = ip1 + peel, *op1_shifted = op1 + peel;
 
-                __assume_aligned(ip1_aligned, 64);
                 for(j = 0; j < j_max; j++) {
                     op1_shifted[j] = ip1_aligned[j] @OP@ ip2c;
                 }
-- 
2.20.1

